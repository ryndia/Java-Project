package algo;

class Linked_list {
	Node node;
	int length;
	
	public Linked_list()
	{
		node = null;
		length = 0;
	}
	
	public Linked_list(int d)
	{
		node = new Node(d);
		length = 1;
	}
	
	public void addLast(int d)
	{
		if(this.node == null)
		{
			this.node = new Node(d);
			return;
		}
		Node temp = this.node;
		Node tempAdd = new Node(d);
		while(temp.next != null)
		{
			temp = temp.next;
		}
		temp.next = tempAdd;
		this.length++;
	}
	
	public void push(int d)
	{
		Node temp = new Node(d);
		temp.next = this.node;
		this.node = temp;
		this.length++;
	}
	
	public void copyLinkedList(Linked_list ll)
	{
		while(ll.node != null)
		{
			this.addLast(ll.node.data);
			ll.node = ll.node.next;
		}
	}
	
	public Linked_list cumulativeSum(Linked_list in)
	{
		Linked_list out = new Linked_list(in.node.data);
		Linked_list temp = new Linked_list();
		int sum = 0;
		for(int i = 1; i < in.length; i++)
		{
			for(int j = 0; j<=i; j++)
			{
					sum+=temp.node.data;
					temp.node = temp.node.next;
			}
			out.addLast(sum);
			temp = in;
			sum = 0;
		}
		return out;
	}
	
	@Override
	public String toString()
	{
		Node temp = this.node;
		String output = "";
		while(temp != null)
		{
			output = output + Integer.toString(temp.data) + " ";
			temp = temp.next;
		}
		return output;
	}
}
